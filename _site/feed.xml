<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sangsoo Nam | Unlimited Power</title>
    <description>I&#39;m a full-stack developer who likes learning, discussing, and solving interesting problems. These days, I&#39;m focusing on Android development at Spotify
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Dec 2015 20:53:18 +0100</pubDate>
    <lastBuildDate>Tue, 29 Dec 2015 20:53:18 +0100</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Bash Pattern</title>
        <description>&lt;h2 id=&quot;variable&quot;&gt;Variable&lt;/h2&gt;

&lt;p&gt;A variable is a symbolic name for information. In the bash, it can be declared with an equal sign &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;. Unlike other languages such as C and Java, a variable type is not needed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;28&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To use/expand the variable, you can simply type its name used in declaration with a prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; . If you use the variable with joining a value, you need to wrap the variable explicitly with &lt;code class=&quot;highlighter-rouge&quot;&gt;${}&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VAR&lt;/span&gt;
28
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;iable
28iable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Variables could reference any value. There is one thing you have to care. When you declare a variable to reference a string, the string could have white spaces. To store the string and reference it properly, it is necessary to wrap with double quotes &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;. If a string doesn’t have any white spaces, it is an optional.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A B C&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VAR&lt;/span&gt;
A B C&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;pattern-removal&quot;&gt;Pattern Removal&lt;/h2&gt;

&lt;p&gt;Once you declare a variable, there are several operations to modify a expanded value. A pattern removal operation is one of them. In here, a pattern is different from a regular expression. The pattern has special characters having the following meanings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;* Matches any string, including the null string.&lt;/li&gt;
  &lt;li&gt;? Matches any single character.&lt;/li&gt;
  &lt;li&gt;[…] Matches any one of the enclosed characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; is a pattern removal operator to remove a trailing string. If there is no matched string, it will return the original string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HEY! HELLO&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%O&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HELL
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HELL
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%[oO]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HELL
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%X&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HELLO&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are two pattern removal operators. One is &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; and the other is &lt;code class=&quot;highlighter-rouge&quot;&gt;%%&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; supports a shortest pattern matching and &lt;code class=&quot;highlighter-rouge&quot;&gt;%%&lt;/code&gt; supports a longest pattern matching. Here are examples.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%L*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HEL
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%%L*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; is a similar operator like &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;. The only difference is that it is to remove a beginning string. There are also similar two operators: &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HEY! HELLO&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#H&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
EY! HELLO
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#*H&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
EY! HELLO
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*H&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
ELLO&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With a pattern removal operation, it would be an easy task to replace an extension of a given filename.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;music.avi&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.mp3
music.avi music.mp3
❯ mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.mp3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;pattern-replacement&quot;&gt;Pattern Replacement&lt;/h2&gt;

&lt;p&gt;If you want to replace a string, you can utilize a pattern replacement operation using &lt;code class=&quot;highlighter-rouge&quot;&gt;${variable/pattern/string}&lt;/code&gt;. If a expanded string of variable contains a matched pattern, a matched part will be replaced with a input string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;music.avi&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/.avi/.mp3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
music.avi music.mp3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, only the first match is replaced. To replace every match, the pattern should begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HEY! HELLO&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/HE/__&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
__Y! HELLO
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//HE/__&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
__Y! __LLO&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If pattern begins with &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;, it must match at the end of the expanded string of variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;REPEAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HELLO HELLO&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/HELLO/hello&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
hello HELLO
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/%HELLO/hello&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HELLO hello&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If pattern begins with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;, it must match at the beginning of the expanded string of variable. As you know, the original string will be returned if there is no matched pattern. In this example, &lt;code class=&quot;highlighter-rouge&quot;&gt;REPEAT&lt;/code&gt; value doesn’t begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;HELLO&lt;/code&gt; so it returns the original string for the &lt;code class=&quot;highlighter-rouge&quot;&gt;#HELLO&lt;/code&gt; pattern.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;❯ &lt;span class=&quot;nv&quot;&gt;REPEAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HEY! HELLO HELLO&quot;&lt;/span&gt;
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/HELLO/hello&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! hello HELLO
❯ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPEAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/#HELLO/hello&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
HEY! HELLO HELLO&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;To get more information, type &lt;code class=&quot;highlighter-rouge&quot;&gt;man bash&lt;/code&gt; and see the ‘Parameter Expansion’ and ‘Pattern Matching’ sections.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 28 Dec 2015 00:00:00 +0100</pubDate>
        <link>/2015/12/28/bash-pattern.html</link>
        <guid isPermaLink="true">/2015/12/28/bash-pattern.html</guid>
        
        
      </item>
    
  </channel>
</rss>
